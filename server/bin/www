#!/usr/bin/env node
/* eslint-disable no-useless-concat */

/**
 * Module dependencies.
 */

const http = require('http');
const path = require('path');
// const debug = require('debug')('sampleapp:server');
require('../config/winston');
const app = require('../app');
const chatApp = require('../service/chat');

const label = { label: path.basename(__filename) };

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  // eslint-disable-next-line no-restricted-globals
  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
chatApp(server);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    logger.error(`${bind} requires elevated privileges`, label);
    process.exit(1);
    break;
  case 'EADDRINUSE':
    logger.error(`${bind} is already in use`, label);
    process.exit(1);
    break;
  default:
    throw error;
  }
}

// kill process on exit
process.on('SIGINT', () => {
  logger.info('Bye bye!', label);
  process.exit();
});

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  logger.info(`Server listening on port : ${port}`, label);
  logger.info(`Server hosted at http://localhost:${port}`, label);
  logger.info('Press CTRL+C to Stop the server', label);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);